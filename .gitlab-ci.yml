stages:
  - lint
  - test
  - build
  - deploy

variables:
  POSTGRES_USER: 'lantern'
  POSTGRES_PASSWORD: ''
  POSTGRES_DB: 'test_lantern'
  POSTGRES_HOST_AUTH_METHOD: trust
  CELERY_BROKER_URL: 'redis://redis:6379/0'

precommit:
  stage: lint
  image: python:3.11
  variables:
    PRE_COMMIT_HOME: ${CI_PROJECT_DIR}/.cache/pre-commit
  cache:
    paths:
      - ${PRE_COMMIT_HOME}
  before_script:
    - pip install -q pre-commit
  script:
    - pre-commit run --show-diff-on-failure --color=always --all-files

pytest:
  stage: test
  image: docker/compose:1.29.2
  tags:
    - docker
  services:
    - docker:dind
  before_script:
    - docker-compose -f local.yml build
    # Ensure celerybeat does not crash due to non-existent tables
    - docker-compose -f local.yml run --rm django python manage.py migrate
    - docker-compose -f local.yml up -d
  script:
    - docker-compose -f local.yml run django pytest
  after_script:
    - cat "$GCP_KEY" | base64 -d | docker login -u _json_key --password-stdin https://gcr.io
    - docker tag lantern_local_django gcr.io/$GCP_PROJECT_ID/lantern-backend:$CI_COMMIT_SHA
    - docker push gcr.io/$GCP_PROJECT_ID/lantern-backend:$CI_COMMIT_SHA
  only:
    - cookiecutter

deploy_to_gke:
  stage: deploy
  image: google/cloud-sdk:latest
  only:
    - cookiecutter
  script:
    - apt-get update && apt-get install -y gettext
    - cat $GCP_KEY | base64 --decode > gcloud-service-key.json
    - gcloud auth activate-service-account --key-file gcloud-service-key.json
    - gcloud config set project $GCP_PROJECT_ID
    - gcloud container clusters get-credentials $GKE_CLUSTER_NAME --region $GCP_REGION
    - envsubst < kubernetes/gke-deployment.yml | kubectl apply -f -
    - kubectl apply -f kubernetes/gke-service.yml
    - kubectl apply -f kubernetes/sealedsecrets.yml
